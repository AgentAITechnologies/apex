import sys
import os
import dotenv

from rich import print

from utils.parsing import *
from utils.tts import tts

from agents.state_callback import StateCallback

dotenv.load_dotenv()


## Begin code generated by meta_tools/update_callbacks.py


class root_Callback(StateCallback):
    def on_enter(self, csm, locals):
        print(f"{self.PRINT_PREFIX} Entering root")
        # Perform actions when entering root
        pass

    def on_exit(self, csm, locals):
        print(f"{self.PRINT_PREFIX} Exiting root")
        # Perform actions when exiting root
        pass

class PrintUIMessage_Callback(StateCallback):
    def on_enter(self, csm, locals):
        print(f"{self.PRINT_PREFIX} Entering PrintUIMessage")
        # Perform actions when entering PrintUIMessage
        pass

    def on_exit(self, csm, locals):
        print(f"{self.PRINT_PREFIX} Exiting PrintUIMessage")
        # Perform actions when exiting PrintUIMessage
        pass

class AssignAction_Callback(StateCallback):
    def on_enter(self, csm, locals):
        print(f"{self.PRINT_PREFIX} Entering AssignAction")
        # Perform actions when entering AssignAction
        pass     

    def on_exit(self, csm, locals):
        print(f"{self.PRINT_PREFIX} Exiting AssignAction")
        # Perform actions when exiting AssignAction
        pass

class Exit_Callback(StateCallback):
    def on_enter(self, csm, locals):
        print(f"{self.PRINT_PREFIX} Entering Exit")
        # Perform actions when entering Exit
        pass

    def on_exit(self, csm, locals):
        print(f"{self.PRINT_PREFIX} Exiting Exit")
        # Perform actions when exiting Exit
        pass

class Start_Callback(StateCallback):
    def on_enter(self, csm, locals):
        print(f"{self.PRINT_PREFIX} Entering Start")
        # Perform actions when entering Start
        pass

    def on_exit(self, csm, locals):
        print(f"{self.PRINT_PREFIX} Exiting Start")
        # Perform actions when exiting Start
        pass
