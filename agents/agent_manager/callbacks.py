from rich import print

from utils.parsing import *
from agents.state_callback import StateCallback

## Begin code generated by meta_tools/update_callbacks.py

class root_Callback(StateCallback):
    def on_enter(self, csm, locals):
        print(f"{self.PRINT_PREFIX} Entering root")
        # Perform actions when entering root
        pass

    def on_exit(self, csm, locals):
        print(f"{self.PRINT_PREFIX} Exiting root")
        # Perform actions when exiting root
        pass

class AwaitIPC_Callback(StateCallback):
    def on_enter(self, csm, locals):
        print(f"{self.PRINT_PREFIX} Entering AwaitIPC")
        # Perform actions when entering AwaitTask
        pass

    def on_exit(self, csm, locals):
        print(f"{self.PRINT_PREFIX} Exiting AwaitIPC")
        # Perform actions when exiting AwaitTask
        pass

class RouteAction_Callback(StateCallback):
    def on_enter(self, csm, locals):
        print(f"{self.PRINT_PREFIX} Entering RouteAction")
        # Perform actions when entering RouteAction

        self = locals["self"]
        action = locals["result"]["action"]
        
        print(f"{self.PRINT_PREFIX} Routing action: {action}")

        print(self.agents)

        agents_xmlstr = ""
        for i, agent in enumerate(self.agents):
            agents_xmlstr += f"<agent idx={i}>\n"
            agents_xmlstr += f"<name>{agent.name}</name>\n"
            agents_xmlstr += f"<description>{agent.description}</description>\n"
            agents_xmlstr += f"<tasks>\n"

            for task in agent.tasks:
                task_xml = dict2xml(task)
                task_str = xml2xmlstr(task_xml)
                agents_xmlstr += task_str + "\n"

            agents_xmlstr += f"</tasks>\n"
            agents_xmlstr += f"</agent>\n"

        print(f"{self.PRINT_PREFIX} agents_str:\n{agents_xmlstr}")

        action_xml = dict2xml(action)
        print(f"{self.PRINT_PREFIX} action_xml:\n{action_xml}")

        action_xmlstr = xml2xmlstr(action_xml)
        print(f"{self.PRINT_PREFIX} action_str:\n{action_xmlstr}")

        prompts = self.memory.load_all_prompts(self.csm.current_state.get_hpath(), "AGTMGR_DIR", dynamic_user_metaprompt=None, frmt={"agents_str": agents_xmlstr, "task": action_xmlstr})
        print(f"{self.PRINT_PREFIX} self.memory.conversation_history:\n{self.memory.conversation_history}")

        llm_response = self.csm.current_state.llm_call(client=self.client,
                                            formatted_system=prompts["system"],
                                            formatted_messages=prompts["messages"],
                                            stop_sequences=["</output>"])
        
        self.memory.store_llm_response("<output>" + llm_response.content[0].text + "</output>")

        print(f"{self.PRINT_PREFIX} llm_response:\n{llm_response}")

        self.parsed_response = xmlstr2dict(llm_response.content[0].text)
        print(f"{self.PRINT_PREFIX} self.parsed_response:\n{self.parsed_response}")

        csm.current_state.data["result"] = self.parsed_response
        csm.current_state.data["task"] = action_xmlstr

    def on_exit(self, csm, locals):
        print(f"{self.PRINT_PREFIX} Exiting RouteAction")
        # Perform actions when exiting RouteAction

class CreateAgent_Callback(StateCallback):
    def on_enter(self, csm, locals):
        print(f"{self.PRINT_PREFIX} Entering CreateAgent") # consumes self.result
        # Perform actions when entering CreateAgent
        self = locals["self"]
        task = csm.state_history[-1].data["task"]

        prompts = self.memory.load_all_prompts(self.csm.current_state.get_hpath(), "AGTMGR_DIR", dynamic_user_metaprompt=None, frmt={"task": task})
        print(f"{self.PRINT_PREFIX} self.memory.conversation_history:\n{self.memory.conversation_history}")

        llm_response = self.csm.current_state.llm_call(client=self.client,
                                    formatted_system=prompts["system"],
                                    formatted_messages=prompts["messages"],
                                    stop_sequences=["</output>"])
        
        self.memory.store_llm_response("<output>" + llm_response.content[0].text + "</output>")

        self.parsed_response = xmlstr2dict(llm_response.content[0].text)
        print(f"{self.PRINT_PREFIX} self.parsed_response:")
        print(self.parsed_response)

        agent_name = self.parsed_response["name"]
        print(f"{self.PRINT_PREFIX} Creating agent: {agent_name}")

        self.create_agent(name=self.parsed_response["name"],
                          description=self.parsed_response["description"],
                          tasks=[task])
        


    def on_exit(self, csm, locals):
        print(f"{self.PRINT_PREFIX} Exiting CreateAgent")
        # Perform actions when exiting CreateAgent
        pass

class AssignAgent_Callback(StateCallback):
    def on_enter(self, csm, locals):
        print(f"{self.PRINT_PREFIX} Entering AssignAgent")
        # Perform actions when entering AssignAgent
        pass

    def on_exit(self, csm, locals):
        print(f"{self.PRINT_PREFIX} Exiting AssignAgent")
        # Perform actions when exiting AssignAgent
        pass

